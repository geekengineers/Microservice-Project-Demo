// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protobuf/article/article.proto

package articleconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	article "github.com/geekengineers/Microservice-Project-Demo/protobuf/article"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ArticleServiceName is the fully-qualified name of the ArticleService service.
	ArticleServiceName = "ArticleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ArticleServiceCreateProcedure is the fully-qualified name of the ArticleService's Create RPC.
	ArticleServiceCreateProcedure = "/ArticleService/Create"
	// ArticleServiceUpdateProcedure is the fully-qualified name of the ArticleService's Update RPC.
	ArticleServiceUpdateProcedure = "/ArticleService/Update"
	// ArticleServiceFindProcedure is the fully-qualified name of the ArticleService's Find RPC.
	ArticleServiceFindProcedure = "/ArticleService/Find"
	// ArticleServiceSearchProcedure is the fully-qualified name of the ArticleService's Search RPC.
	ArticleServiceSearchProcedure = "/ArticleService/Search"
	// ArticleServiceDeleteProcedure is the fully-qualified name of the ArticleService's Delete RPC.
	ArticleServiceDeleteProcedure = "/ArticleService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	articleServiceServiceDescriptor      = article.File_protobuf_article_article_proto.Services().ByName("ArticleService")
	articleServiceCreateMethodDescriptor = articleServiceServiceDescriptor.Methods().ByName("Create")
	articleServiceUpdateMethodDescriptor = articleServiceServiceDescriptor.Methods().ByName("Update")
	articleServiceFindMethodDescriptor   = articleServiceServiceDescriptor.Methods().ByName("Find")
	articleServiceSearchMethodDescriptor = articleServiceServiceDescriptor.Methods().ByName("Search")
	articleServiceDeleteMethodDescriptor = articleServiceServiceDescriptor.Methods().ByName("Delete")
)

// ArticleServiceClient is a client for the ArticleService service.
type ArticleServiceClient interface {
	Create(context.Context, *connect.Request[article.CreateRequest]) (*connect.Response[article.CreateResponse], error)
	Update(context.Context, *connect.Request[article.UpdateRequest]) (*connect.Response[article.UpdateResponse], error)
	Find(context.Context, *connect.Request[article.FindRequest]) (*connect.Response[article.FindResponse], error)
	Search(context.Context, *connect.Request[article.SearchRequest]) (*connect.Response[article.SearchResponse], error)
	Delete(context.Context, *connect.Request[article.DeleteRequest]) (*connect.Response[article.DeleteResponse], error)
}

// NewArticleServiceClient constructs a client for the ArticleService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewArticleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ArticleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &articleServiceClient{
		create: connect.NewClient[article.CreateRequest, article.CreateResponse](
			httpClient,
			baseURL+ArticleServiceCreateProcedure,
			connect.WithSchema(articleServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[article.UpdateRequest, article.UpdateResponse](
			httpClient,
			baseURL+ArticleServiceUpdateProcedure,
			connect.WithSchema(articleServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		find: connect.NewClient[article.FindRequest, article.FindResponse](
			httpClient,
			baseURL+ArticleServiceFindProcedure,
			connect.WithSchema(articleServiceFindMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		search: connect.NewClient[article.SearchRequest, article.SearchResponse](
			httpClient,
			baseURL+ArticleServiceSearchProcedure,
			connect.WithSchema(articleServiceSearchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[article.DeleteRequest, article.DeleteResponse](
			httpClient,
			baseURL+ArticleServiceDeleteProcedure,
			connect.WithSchema(articleServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// articleServiceClient implements ArticleServiceClient.
type articleServiceClient struct {
	create *connect.Client[article.CreateRequest, article.CreateResponse]
	update *connect.Client[article.UpdateRequest, article.UpdateResponse]
	find   *connect.Client[article.FindRequest, article.FindResponse]
	search *connect.Client[article.SearchRequest, article.SearchResponse]
	delete *connect.Client[article.DeleteRequest, article.DeleteResponse]
}

// Create calls ArticleService.Create.
func (c *articleServiceClient) Create(ctx context.Context, req *connect.Request[article.CreateRequest]) (*connect.Response[article.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls ArticleService.Update.
func (c *articleServiceClient) Update(ctx context.Context, req *connect.Request[article.UpdateRequest]) (*connect.Response[article.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Find calls ArticleService.Find.
func (c *articleServiceClient) Find(ctx context.Context, req *connect.Request[article.FindRequest]) (*connect.Response[article.FindResponse], error) {
	return c.find.CallUnary(ctx, req)
}

// Search calls ArticleService.Search.
func (c *articleServiceClient) Search(ctx context.Context, req *connect.Request[article.SearchRequest]) (*connect.Response[article.SearchResponse], error) {
	return c.search.CallUnary(ctx, req)
}

// Delete calls ArticleService.Delete.
func (c *articleServiceClient) Delete(ctx context.Context, req *connect.Request[article.DeleteRequest]) (*connect.Response[article.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// ArticleServiceHandler is an implementation of the ArticleService service.
type ArticleServiceHandler interface {
	Create(context.Context, *connect.Request[article.CreateRequest]) (*connect.Response[article.CreateResponse], error)
	Update(context.Context, *connect.Request[article.UpdateRequest]) (*connect.Response[article.UpdateResponse], error)
	Find(context.Context, *connect.Request[article.FindRequest]) (*connect.Response[article.FindResponse], error)
	Search(context.Context, *connect.Request[article.SearchRequest]) (*connect.Response[article.SearchResponse], error)
	Delete(context.Context, *connect.Request[article.DeleteRequest]) (*connect.Response[article.DeleteResponse], error)
}

// NewArticleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewArticleServiceHandler(svc ArticleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	articleServiceCreateHandler := connect.NewUnaryHandler(
		ArticleServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(articleServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	articleServiceUpdateHandler := connect.NewUnaryHandler(
		ArticleServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(articleServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	articleServiceFindHandler := connect.NewUnaryHandler(
		ArticleServiceFindProcedure,
		svc.Find,
		connect.WithSchema(articleServiceFindMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	articleServiceSearchHandler := connect.NewUnaryHandler(
		ArticleServiceSearchProcedure,
		svc.Search,
		connect.WithSchema(articleServiceSearchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	articleServiceDeleteHandler := connect.NewUnaryHandler(
		ArticleServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(articleServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ArticleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ArticleServiceCreateProcedure:
			articleServiceCreateHandler.ServeHTTP(w, r)
		case ArticleServiceUpdateProcedure:
			articleServiceUpdateHandler.ServeHTTP(w, r)
		case ArticleServiceFindProcedure:
			articleServiceFindHandler.ServeHTTP(w, r)
		case ArticleServiceSearchProcedure:
			articleServiceSearchHandler.ServeHTTP(w, r)
		case ArticleServiceDeleteProcedure:
			articleServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedArticleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedArticleServiceHandler struct{}

func (UnimplementedArticleServiceHandler) Create(context.Context, *connect.Request[article.CreateRequest]) (*connect.Response[article.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ArticleService.Create is not implemented"))
}

func (UnimplementedArticleServiceHandler) Update(context.Context, *connect.Request[article.UpdateRequest]) (*connect.Response[article.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ArticleService.Update is not implemented"))
}

func (UnimplementedArticleServiceHandler) Find(context.Context, *connect.Request[article.FindRequest]) (*connect.Response[article.FindResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ArticleService.Find is not implemented"))
}

func (UnimplementedArticleServiceHandler) Search(context.Context, *connect.Request[article.SearchRequest]) (*connect.Response[article.SearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ArticleService.Search is not implemented"))
}

func (UnimplementedArticleServiceHandler) Delete(context.Context, *connect.Request[article.DeleteRequest]) (*connect.Response[article.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ArticleService.Delete is not implemented"))
}
